<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Tableau de Bord</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; background: #f5f5f5; }
        h1, h2 { color: #003366; }
        form { margin-bottom: 20px; padding: 10px; background: #fff; border-radius: 5px; }
        input, button { margin: 5px 0; padding: 5px; }
        button { cursor: pointer; }
        p { font-weight: bold; }
        p.success { color: green; }
        p.error { color: red; }
        a { color: #003366; text-decoration: none; margin-right: 10px; }
    </style>
</head>
<body>
    <h1>Tableau de bord</h1>

    <!-- Gestion Utilisateurs -->
    <h2>Gestion Utilisateurs</h2>

    <form id="createUserForm">
        <input type="text" name="username" placeholder="Nom" required>
        <input type="email" name="email" placeholder="Email" required>
        <input type="password" name="password" placeholder="Mot de passe" required>
        <button type="submit">Cr√©er utilisateur</button>
    </form>
    <p id="createUserMsg"></p>

    <form id="updateUserForm">
        <input type="text" name="id" placeholder="ID utilisateur" required>
        <input type="text" name="username" placeholder="Nouveau nom">
        <input type="email" name="email" placeholder="Nouvel email">
        <button type="submit">Modifier utilisateur</button>
    </form>
    <p id="updateUserMsg"></p>

    <form id="deleteUserForm">
        <input type="text" name="id" placeholder="ID utilisateur" required>
        <button type="submit">Supprimer utilisateur</button>
    </form>
    <p id="deleteUserMsg"></p>

    <!-- Gestion Catways -->
    <h2>Gestion Catways</h2>

    <form id="createCatwayForm">
        <input type="number" name="catwayNumber" placeholder="Num√©ro" required>
        <input type="text" name="type" placeholder="Type (long/short)" required>
        <input type="text" name="catwayState" placeholder="√âtat" required>
        <button type="submit">Cr√©er catway</button>
    </form>
    <p id="createCatwayMsg"></p>

    <form id="updateCatwayForm">
        <input type="text" name="id" placeholder="ID catway" required>
        <input type="text" name="catwayState" placeholder="Nouvel √©tat">
        <button type="submit">Modifier catway</button>
    </form>
    <p id="updateCatwayMsg"></p>

    <form id="deleteCatwayForm">
        <input type="text" name="id" placeholder="ID catway" required>
        <button type="submit">Supprimer catway</button>
    </form>
    <p id="deleteCatwayMsg"></p>

    <!-- Gestion R√©servations -->
    <h2>Gestion R√©servations</h2>

    <form id="createReservationForm">
        <input type="text" name="catwayNumber" placeholder="Num√©ro catway" required>
        <input type="text" name="clientName" placeholder="Nom client" required>
        <input type="text" name="boatName" placeholder="Nom bateau" required>
        <input type="date" name="checkIn" required>
        <input type="date" name="checkOut" required>
        <button type="submit">Ajouter r√©servation</button>
    </form>
    <p id="createReservationMsg"></p>

    <form id="deleteReservationForm">
        <input type="text" name="catwayNumber" placeholder="Num√©ro catway" required>
        <input type="text" name="idReservation" placeholder="ID r√©servation" required>
        <button type="submit">Supprimer r√©servation</button>
    </form>
    <p id="deleteReservationMsg"></p>

    <br>
    <a href="/catways">üìã Voir la liste des catways</a>
    <a href="/reservations">üìã Voir la liste des r√©servations</a>

    <script>
        // Fonction g√©n√©rique pour afficher messages
        function showMessage(id, message, success=true){
            const el = document.getElementById(id);
            el.innerText = message;
            el.className = success ? 'success' : 'error';
        }

        // --- Utilisateurs ---
        document.getElementById('createUserForm').addEventListener('submit', async e => {
            e.preventDefault();
            const data = Object.fromEntries(new FormData(e.target).entries());
            try{
                const res = await fetch('/api/users', { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(data) });
                const json = await res.json();
                showMessage('createUserMsg', json.message || 'Utilisateur cr√©√© !', res.ok);
                if(res.ok) e.target.reset();
            }catch(err){ showMessage('createUserMsg', 'Erreur r√©seau', false); }
        });

        document.getElementById('updateUserForm').addEventListener('submit', async e => {
            e.preventDefault();
            const data = Object.fromEntries(new FormData(e.target).entries());
            const id = data.id; delete data.id;
            try{
                const res = await fetch(`/api/users/${id}`, { method:'PUT', headers:{'Content-Type':'application/json'}, body:JSON.stringify(data) });
                const json = await res.json();
                showMessage('updateUserMsg', json.message || 'Utilisateur modifi√© !', res.ok);
            }catch(err){ showMessage('updateUserMsg', 'Erreur r√©seau', false); }
        });

        document.getElementById('deleteUserForm').addEventListener('submit', async e => {
            e.preventDefault();
            const id = e.target.id.value;
            try{
                const res = await fetch(`/api/users/${id}`, { method:'DELETE' });
                const json = await res.json();
                showMessage('deleteUserMsg', json.message || 'Utilisateur supprim√© !', res.ok);
            }catch(err){ showMessage('deleteUserMsg', 'Erreur r√©seau', false); }
        });

        // --- Catways ---
        document.getElementById('createCatwayForm').addEventListener('submit', async e => {
            e.preventDefault();
            const data = Object.fromEntries(new FormData(e.target).entries());
            try{
                const res = await fetch('/api/catways', { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(data) });
                const json = await res.json();
                showMessage('createCatwayMsg', json.message || 'Catway cr√©√© !', res.ok);
                if(res.ok) e.target.reset();
            }catch(err){ showMessage('createCatwayMsg', 'Erreur r√©seau', false); }
        });

        document.getElementById('updateCatwayForm').addEventListener('submit', async e => {
            e.preventDefault();
            const data = Object.fromEntries(new FormData(e.target).entries());
            const id = data.id; delete data.id;
            try{
                const res = await fetch(`/api/catways/${id}`, { method:'PATCH', headers:{'Content-Type':'application/json'}, body:JSON.stringify(data) });
                const json = await res.json();
                showMessage('updateCatwayMsg', json.message || 'Catway modifi√© !', res.ok);
            }catch(err){ showMessage('updateCatwayMsg', 'Erreur r√©seau', false); }
        });

        document.getElementById('deleteCatwayForm').addEventListener('submit', async e => {
            e.preventDefault();
            const id = e.target.id.value;
            try{
                const res = await fetch(`/api/catways/${id}`, { method:'DELETE' });
                const json = await res.json();
                showMessage('deleteCatwayMsg', json.message || 'Catway supprim√© !', res.ok);
            }catch(err){ showMessage('deleteCatwayMsg', 'Erreur r√©seau', false); }
        });

        // --- R√©servations ---
        document.getElementById('createReservationForm').addEventListener('submit', async e => {
            e.preventDefault();
            const data = Object.fromEntries(new FormData(e.target).entries());
            const catwayNumber = data.catwayNumber; delete data.catwayNumber;
            try{
                const res = await fetch(`/api/catways/${catwayNumber}/reservations`, { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(data) });
                const json = await res.json();
                showMessage('createReservationMsg', json.message || 'R√©servation ajout√©e !', res.ok);
                if(res.ok) e.target.reset();
            }catch(err){ showMessage('createReservationMsg', 'Erreur r√©seau', false); }
        });

        document.getElementById('deleteReservationForm').addEventListener('submit', async e => {
            e.preventDefault();
            const data = Object.fromEntries(new FormData(e.target).entries());
            const catwayNumber = data.catwayNumber;
            const idReservation = data.idReservation;
            try{
                const res = await fetch(`/api/catways/${catwayNumber}/reservations/${idReservation}`, { method:'DELETE' });
                const json = await res.json();
                showMessage('deleteReservationMsg', json.message || 'R√©servation supprim√©e !', res.ok);
            }catch(err){ showMessage('deleteReservationMsg', 'Erreur r√©seau', false); }
        });
    </script>
</body>
</html>
